name: chocolatine

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  MIRROR_URL: "git@github.com:EpitechPromo2027/B-DOP-200-LYN-2-1-chocolatine-safia.beaumale-mesmar"
  EXECUTABLES: "binary"
  ARGUMENTS: ""

jobs:
  check_repo:
    name: "Checks if the repository is clean and void of any unwanted files (temp files, binary files, etc.)"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest

    steps:
      - uses: actions/checkout@v3
      - id: check_repo
        run: |
          check.sh $(pwd) $(pwd);
          if [[ -s coding-style-reports.log ]]; then
            echo "::error file=coding-style-reports.log::Coding style check failed. Please fix the errors in the report file."
          fi;
  check_program_compilation:
    needs: [check_repo]
    name: "Checks compilation of binaries given"
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest

    steps:
      - uses: actions/checkout@v3
      - run: make
        timeout-minutes: 2
        continue-on-error: true
        shell: bash
        env:
          EXECUTABLES: ${{ env.EXECUTABLES }}

      - run: make clean

      - run: |
          OIFS=$IFS
          IFS=','
          for x in $EXECUTABLES
            do
              ./$x || echo "::error file=$x::Binary failed to execute. Please check the code."
            done
          IFS=$OIFS
  run_tests:
    needs: [check_program_compilation]
    name: "Runs tests with criterion"
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest

    steps:
      - uses: actions/checkout@v3
      - id: run_tests
        run: make tests_run
        timeout-minutes: 2
        continue-on-error: true
        shell: bash
        env:
          EXECUTABLES: ${{ env.EXECUTABLES }}

      - run: |
          if [[ -s criterion_output.log ]]; then
            echo "::error file=criterion_output.log::Unit tests failed. Please check the report file."
          fi;
  push_to_mirror:
    needs: [run_tests]
    name: "Push to mirror"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_KEY }}
