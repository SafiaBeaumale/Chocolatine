name: chocolatine

on:
  push:
    branches-ignore:
    - "ga-ignore-*"
  pull_request:
    branches-ignore:
    - "ga-ignore-*"

env:
  MIRROR_URL: "git@github.com:EpitechPromo2027/B-DOP-200-LYN-2-1-chocolatine-safia.beaumale-mesmar"
  EXECUTABLES: "binary"
  ARGUMENTS: ""

jobs:
  coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v3
      - id: coding_style
        run: |
          UNWANTED_FILES=$(find . -type f -not -path "./git/*" -wholename "*tmp/*" -or -name "*~" -or -name "*.o" -or -name "*.so" -or -name "*.gcno" -or -name "*.gcda" -or -name "*#" -or -name "#*" -or -name "*.gcov" -or -name "*pain_au_chocolat*")
          for FILES in $UNWANTED_FILES; do
            echo "::error file=${FILES#./},title=Unwanted file detected::${FILES#./}"
          done
          if [[ -n $UNWANTED_FILES ]]
          then
            exit 1
          else
            echo No unwanted files detected
          fi

  compilation:
    name: "Checks compilation of binaries given !"
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    needs: 
      - coding_style

    steps:
      - uses: actions/checkout@v3
      - run: make
        timeout-minutes: 2
      - run: make clean
      - run: |
          OIFS=$IFS
          IFS=','
          for x in $EXECUTABLES
            do
              ./$x
            done
          IFS=$OIFS

  run_tests:
    name: "Runs criterion tests !"
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    needs: 
      - compilation

    steps:
      - uses: actions/checkout@v3
      - id: run_tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    name: "Push files to given mirror repo !"
    runs-on: ubuntu-latest
    needs:
      - run_tests

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: pixta-dev/repository-mirroring-action@main
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_KEY }}
